name: Deploy Application
on:  
  workflow_run:
    branches: [main]
    workflows:
      - Build
    types:
      - completed

jobs:
  provision_backend:
    runs-on: ubuntu-latest
    outputs:
      backend_url: ${{ steps.provision.outputs.backend_url }}
    steps:
      - name: Checkout
        uses: actions/checkout@v1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_wrapper: false
          terraform_version: 1.2.9

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
  
      - name: Provision Frontend Infrastructure
        id: provision
        uses: dflook/terraform-apply@v1
        with:
          path: util/terraform/backend
          variables: |
            instance_name = "anyhasher-backend-${{ github.run_number }}"

  configure_backend:
    needs: [provision_backend]
    runs-on: ubuntu-latest
    environment: 
      name: Green Backend Environment
      url: https://${{ needs.provision_backend.outputs.backend_url }}
    steps:      
      - name: Checkout
        uses: actions/checkout@v1
        
      - name: Get Backend Artifact
        uses: dawidd6/action-download-artifact@v2
        with:
          workflow: backend.yml
          name: backend-artifact
          path: backend/build/
      
      - name: Configure Backend Infrastructure
        uses: dawidd6/action-ansible-playbook@v2
        with:
          playbook: deploy.yml
          directory: ./util/ansible
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          inventory: |
            [ec2]
            ${{ needs.provision_backend.outputs.backend_url }}
          options: |
            --verbose            

  provision_frontend:
    outputs:
      frontend_url: ${{ steps.provision.outputs.frontend_url }}
      bucket_name: ${{ steps.provision.outputs.bucket_name }}
    runs-on: ubuntu-latest
    steps:      
      - name: Checkout
        uses: actions/checkout@v1

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
  
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_wrapper: false
          terraform_version: 1.2.9

      - name: Provision Frontend Infrastructure
        id: provision
        uses: dflook/terraform-apply@v1
        with:
          path: util/terraform/frontend
          variables: |
            bucket_name = "anyhasher-frontend-${{ github.run_number}}"
  
  configure_frontend:
    needs: [provision_backend,provision_frontend]
    runs-on: ubuntu-latest
    environment: 
      name: Green Frontend Environment
      url: https://${{ needs.provision_frontend.outputs.frontend_url }}
    steps:      
      - name: Get Frontend Artifact
        uses: dawidd6/action-download-artifact@v2
        with:
          workflow: frontend.yml
          name: frontend-artifact
          path: frontend/build
  
      - name: Prepare frontend with backend url
        uses: jacobtomlinson/gha-find-replace@v2
        with:
          find: "__BACKEND_URL_PLACEHOLDER__"
          replace: "${{ needs.provision_backend.outputs.backend_url }}"
          regex: false

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
  
      - name: Upload frontend to S3 Bucket
        run: |
          aws s3 cp frontend/build s3://${{ needs.provision_frontend.outputs.bucket_name }} --region=us-east-1 --recursive

  verify-frontend:
    runs-on: ubuntu-latest
    needs: [configure_backend,configure_frontend]
    steps:
      - name: Checkout
        uses: actions/checkout@v1

      - name: Run Frontend Smoke Test
        run: |
          export TEST_URL=${{ needs.provision_infrastructure.outputs.frontend_url }}
          cd e2e
          npm install
          npm run frontend-smoke  

      - name: Handle Failure
        if: failure()         
        uses: rickstaa/action-create-tag@v1
        with:
          tag: "failure-{{ github.run_number }}"
          message: "Failed attempt to verify frontend after deploy" 
      
  verify-backend:
    runs-on: ubuntu-latest
    needs: [configure_backend]
    steps:
      - name: Checkout
        uses: actions/checkout@v1

      - name: Run Backend Smoke Test
        run: |
          export BACKEND_URL=${{ needs.provision_infrastructure.outputs.backend_url }}
          cd e2e
          chmod +x backend-smoke.sh
          ./backend-smoke.sh
      
      - name: Handle Failure
        if: failure()         
        uses: rickstaa/action-create-tag@v1
        with:
          tag: "failure-{{ github.run_number }}"
          message: "Failed attempt to verify backend after deploy"
  
  promote_green_to_blue:
    needs: [verify-backend,verify-frontend]    
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Checkout
        uses: actions/checkout@v1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_wrapper: false
          terraform_version: 1.2.9

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Change CloudFront "Router"
        uses: dawidd6/action-ansible-playbook@v2
        with:
          playbook: promote.yml
          directory: ./util/ansible
          options: |
            --verbose
            --extra-vars "distro_id='${{ secrets.AWS_CLOUDFRONT_DISTRIBUTION_ID }}' origin_domain='${{ needs.provision_infrastructure.outputs.frontend_url }}'"
  
      - name: Tag Green as New Blue
        if: success()         
        uses: rickstaa/action-create-tag@v1
        with:
          tag: "blue-{{ github.run_number }}"
          message: "Latest release" 

      - name: Handle Failure
        if: failure()         
        uses: rickstaa/action-create-tag@v1
        with:
          tag: "failure-{{ github.run_number }}"
          message: "Failed attempt to promote after successful verify"