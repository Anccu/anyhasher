name: Deploy
on:  
  push:
  workflow_dispatch:
  workflow_run:
    workflows:
      #- Backend CI
      - Frontend CI
    types:
      - completed

concurrency: 
  group: "prod-green"
  cancel-in-progress: true

jobs:
  provision_backend:
    runs-on: ubuntu-latest
    outputs:
      backend_url: ${{ steps.provision.outputs.backend_url }}
    steps:
      - name: Checkout
        uses: actions/checkout@v1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_wrapper: false
          terraform_version: 1.2.9

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
  
      - name: Provision Backend Infrastructure
        id: provision
        run: |
          cd util/terraform/backend
          terraform init 
          terraform apply -auto-approve -var instance_name=anyhasher-backend-${{ github.run_number }} 
          export BACKEND_URL=$(terraform output -raw ec2_public_url)
          echo "::set-output name=backend_url::$BACKEND_URL"        
    
  configure_backend:
    needs: [provision_backend]
    runs-on: ubuntu-latest
    steps:      
      - name: Checkout
        uses: actions/checkout@v1
        
      - name: Get Backend Artifact
        uses: dawidd6/action-download-artifact@v2
        with:
          workflow: backend.yml
          name: backend-artifact
          path: backend/build/
      
      - run: echo ${{ needs.provision_backend.outputs.backend_url }}

      - name: Configure Backend Infrastructure
        uses: dawidd6/action-ansible-playbook@v2
        with:
          playbook: deploy.yml
          directory: ./util/ansible
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          inventory: |
            [ec2]
            ${{ needs.provision_backend.outputs.backend_url }}
          options: |
            --verbose

  provision_frontend:
    outputs:
      frontend_url: ${{ steps.provision.outputs.frontend_url }}
      bucket_name: ${{ steps.provision.outputs.bucket_name }}
    runs-on: ubuntu-latest
    steps:      
      - name: Checkout
        uses: actions/checkout@v1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_wrapper: false
          terraform_version: 1.2.9

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
  
      - name: Provision Frontend Infrastructure
        id: provision
        run: |
          export S3_BUCKET_NAME=anyhasher-frontend-${{ github.run_number}}
          cd util/terraform/frontend          
          terraform init 
          terraform apply -auto-approve -var bucket_name=$S3_BUCKET_NAME
          echo "::set-output name=bucket_name::$S3_BUCKET_NAME"          
          export S3_URL=$(terraform output -raw website_endpoint)
          echo "::set-output name=frontend_url::$S3_URL"
  
  configure_frontend:
    needs: [provision_backend,provision_frontend]
    runs-on: ubuntu-latest
    steps:      
      - name: Get Frontend Artifact
        uses: dawidd6/action-download-artifact@v2
        with:
          workflow: frontend.yml
          name: frontend-artifact
          path: frontend/build
  
      - name: Prepare frontend with backend url
        uses: jacobtomlinson/gha-find-replace@v2
        with:
          find: "__BACKEND_URL_PLACEHOLDER__"
          replace: "${{ needs.provision_backend.outputs.backend_url }}"
          regex: false

      - name: Upload frontend to S3 Bucket
        run: |
          aws s3 cp build s3://${{ needs.provision_frontend.outputs.frontend_url }} --region=us-east-1 --recursive

  verify-frontend:
    runs-on: ubuntu-latest
    needs: [configure_backend,configure_frontend]
    steps:
      - name: Checkout
        uses: actions/checkout@v1

      - name: Run Frontend Smoke Test
        run: |
          export TEST_URL=${{ needs.provision_infrastructure.outputs.frontend_url }}
          cd e2e
          npm install
          npm run frontend-smoke   
      
  verify-backend:
    runs-on: ubuntu-latest
    needs: [configure_backend]
    steps:
      - name: Checkout
        uses: actions/checkout@v1

      - name: Run Backend Smoke Test
        run: |
          export BACKEND_URL=${{ needs.provision_infrastructure.outputs.backend_url }}
          cd e2e
          chmod +x backend-smoke.sh
          ./backend-smoke.sh

  promote_green_to_blue:
    needs: [verify-backend,verify-frontend]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_wrapper: false
          terraform_version: 1.2.9

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Switch CloudFront router from old to new
        run: |
          echo Thanks Sean Killeen!! - https://seankilleen.com/2021/07/how-to-automate-aws-cloudfront-distribution-folder-changes-when-deploying-a-static-web-site/
          export cloudfront_distribution_id=${{ secrets.AWS_CLOUDFRONT_DISTRIBUTION_ID }}
          export region=us-east-1
          
          aws cloudfront get-distribution-config --id $cloudfront_distribution_id --region $region > output.json
          cat output.json
          etag=`cat output.json | jq -r ".ETag"`
          cat output.json | jq "del(.ETag) | (.DistributionConfig.Origins.Items[] | select(.Id == \"$cloudfront_s3_origin_id\")).OriginPath = \"/$release_number\" | .DistributionConfig" > updated-config.json
          
          aws cloudfront update-distribution --id $cloudfront_distribution_id --region $region --if-match="$etag" --distribution-config file://updated-config.json
          aws cloudfront wait distribution-deployed --id $cloudfront_distribution_id --region $region
          aws cloudfront create-invalidation --distribution-id $cloudfront_distribution_id --paths "/*" --region $region

  